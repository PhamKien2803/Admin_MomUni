const { app } = require('@azure/functions');
const axios = require('axios');

const endpointRaw = process.env.OPENAI_API_ENDPOINT || '';
const apiKey = process.env.OPENAI_API_KEY;
const deploymentName = 'gpt-35-turbo-2';
const apiVersion = '2025-01-01-preview';

const endpoint = endpointRaw.endsWith('/') ? endpointRaw : endpointRaw + '/';

app.http('botMessage', {
    methods: ['POST'],
    authLevel: 'anonymous',
    route: 'messages',
    handler: async (request, context) => {
        const activity = await request.json();
        const userMessage = activity?.text || '';

        context.log(`ü§ñ Incoming message: ${userMessage}`);
        context.log("üîç Using endpoint:", endpoint);
        context.log("üîç API Key present:", !!apiKey);

        const systemPrompt = `
      B·∫°n l√† tr·ª£ l√Ω AI c·ªßa MomUni, ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ:
      - Thai k·ª≥
      - ChƒÉm s√≥c tr·∫ª s∆° sinh v√† tr·∫ª nh·ªè
      - Dinh d∆∞·ª°ng m·∫π v√† b√©
      - T√¢m l√Ω ph·ª• n·ªØ, gi√°o d·ª•c s·ªõm
      N·∫øu ng∆∞·ªùi d√πng h·ªèi ngo√†i ch·ªß ƒë·ªÅ, h√£y t·ª´ ch·ªëi l·ªãch s·ª±.
    `;

        try {
            const url = `${endpoint}openai/deployments/${deploymentName}/chat/completions?api-version=${apiVersion}`;
            context.log("üåê Requesting Azure OpenAI at:", url);

            const response = await axios.post(
                url,
                {
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: userMessage }
                    ],
                    temperature: 0.7,
                    max_tokens: 1000
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'api-key': apiKey
                    }
                }
            );

            const reply = response.data.choices?.[0]?.message?.content || 'Xin l·ªói, kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.';

            return {
                status: 200,
                jsonBody: {
                    type: 'message',
                    text: reply
                }
            };
        } catch (error) {
            context.error('‚ùå Azure OpenAI error:', error.response?.data || error.message);

            return {
                status: 200,
                jsonBody: {
                    type: 'message',
                    text: 'Xin l·ªói, tr·ª£ l√Ω MomUni ƒëang g·∫∑p s·ª± c·ªë. B·∫°n th·ª≠ l·∫°i sau nh√©.'
                }
            };
        }
    }
});
